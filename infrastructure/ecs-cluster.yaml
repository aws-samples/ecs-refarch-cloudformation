Description: >
    This template deploys an ECS cluster to the provided VPC and subnets 
    using an Auto Scaling Group

Parameters:

    EnvironmentName:
        Description: An environment name that will be prefixed to resource names
        Type: String

    InstanceType: 
        Description: Which instance type should we use to build the ECS cluster?
        Type: String
        Default: c4.large

    ClusterSize:
        Description: How many ECS hosts do you want to initially deploy?
        Type: Number
        Default: 4

    VPC:
        Description: Choose which VPC this ECS cluster should be deployed to
        Type: AWS::EC2::VPC::Id

    Subnets:
        Description: Choose which subnets this ECS cluster should be deployed to
        Type: List<AWS::EC2::Subnet::Id>

    SecurityGroup:
        Description: Select the Security Group to use for the ECS cluster hosts
        Type: AWS::EC2::SecurityGroup::Id

    SSHKey:
        Type: AWS::EC2::KeyPair::KeyName
        Description: SSH Key for to access to the ECS Hosts

Mappings:

    # These are the latest ECS optimized AMIs as of November 2016:
    #
    #   amzn-ami-2016.09.b-amazon-ecs-optimized
    #   ECS agent:    1.13.1
    #   Docker:       1.11.2
    #   ecs-init:     1.13.1-1
    #
    # You can find the latest available on this page of our documentation:
    # http://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html
    # (note the AMI identifier is region specific) 

    AWSRegionToAMI:
        us-east-1:
            AMI: ami-eca289fb
        us-east-2:
            AMI: ami-446f3521
        us-west-1:
            AMI: ami-9fadf8ff
        us-west-2:
            AMI: ami-7abc111a
        eu-west-1:
            AMI: ami-a1491ad2
        eu-central-1:
            AMI: ami-54f5303b
        ap-northeast-1:
            AMI: ami-9cd57ffd
        ap-southeast-1:
            AMI: ami-a900a3ca
        ap-southeast-2:
            AMI: ami-5781be34

Resources:

    ECSCluster:
        Type: AWS::ECS::Cluster
        Properties:
            ClusterName: !Ref EnvironmentName

    ECSAutoScalingGroup:
        Type: AWS::AutoScaling::AutoScalingGroup
        Properties: 
            VPCZoneIdentifier: !Ref Subnets
            LaunchConfigurationName: !Ref ECSLaunchConfiguration
            MinSize: !Ref ClusterSize
            MaxSize: !Ref ClusterSize
            DesiredCapacity: !Ref ClusterSize
            Tags: 
                - Key: Name
                  Value: !Sub ${EnvironmentName} ECS host
                  PropagateAtLaunch: true
        CreationPolicy:
            ResourceSignal: 
                Timeout: PT15M
        UpdatePolicy:
            AutoScalingReplacingUpdate:
                WillReplace: true
        
    ECSLaunchConfiguration:
        Type: AWS::AutoScaling::LaunchConfiguration
        Properties:
            KeyName: !Ref SSHKey
            ImageId:  !FindInMap [AWSRegionToAMI, !Ref "AWS::Region", AMI]
            InstanceType: !Ref InstanceType
            SecurityGroups: 
                - !Ref SecurityGroup
            IamInstanceProfile: !Ref ECSInstanceProfile
            BlockDeviceMappings:
                - DeviceName: /dev/xvdf
                  Ebs:
                    DeleteOnTermination: True
                    VolumeSize: 20
                    VolumeType: gp2
            UserData: 
                "Fn::Base64": !Sub |
                    Content-Type: multipart/mixed; boundary="MIMEBOUNDARY"
                    MIME-Version: 1.0
                    --MIMEBOUNDARY
                    Content-Disposition: attachment; filename="user_data.sh"
                    Content-Transfer-Encoding: 7bit
                    Content-Type: text/x-shellscript
                    Mime-Version: 1.0

                    #!/bin/bash
                    echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config
                    yum install -y aws-cfn-bootstrap
                    /opt/aws/bin/cfn-signal -s true --region ${AWS::Region} --stack ${AWS::StackName} --resource ECSAutoScalingGroup

                    --MIMEBOUNDARY
                    Content-Disposition: attachment; filename="cloud_config.yaml"
                    Content-Transfer-Encoding: 7bit
                    Content-Type: text/cloud-config
                    Mime-Version: 1.0
                     
                    #cloud-config
                    #fs_setup:
                    #  - label: volumes
                    #    filesystem: ext4
                    #    device: /dev/xvdf
                    #    partition: none
                    #mounts:
                    #  - [ LABEL=volumes, /var/lib/docker/volumes, auto, defaults]
                    #### Have to do this in runcmd because fs_setup is not supported
                    #### yet in Amazon Linux
                    runcmd:
                      - mkfs.ext4 -L volumes /dev/xvdf
                      - echo "LABEL=volumes /var/lib/docker/volumes ext4 defaults 0 2" >> /etc/fstab
                      - mkdir -p /var/lib/docker/volumes
                      - service docker stop
                      - mount /var/lib/docker/volumes
                      - service docker start
                      - start ecs



    # This IAM Role is attached to all of the ECS hosts. It is based on the default role
    # published here:
    # http://docs.aws.amazon.com/AmazonECS/latest/developerguide/instance_IAM_role.html
    #
    # You can add other IAM policy statements here to allow access from your ECS hosts
    # to other AWS services. Please note that this role will be used by ALL containers
    # running on the ECS host.

    ECSRole:
        Type: AWS::IAM::Role
        Properties: 
            Path: /
            RoleName: !Sub ${EnvironmentName}-ECSRole-${AWS::Region}
            AssumeRolePolicyDocument: |
                {
                    "Statement": [{
                        "Action": "sts:AssumeRole",
                        "Effect": "Allow",
                        "Principal": { 
                            "Service": "ec2.amazonaws.com" 
                        }
                    }]
                }
            Policies: 
                - PolicyName: ecs-service
                  PolicyDocument: |
                    {
                        "Statement": [{
                            "Effect": "Allow",
                            "Action": [
                                "ecs:CreateCluster",
                                "ecs:DeregisterContainerInstance",
                                "ecs:DiscoverPollEndpoint",
                                "ecs:Poll",
                                "ecs:RegisterContainerInstance",
                                "ecs:StartTelemetrySession",
                                "ecs:Submit*",
                                "logs:CreateLogStream",
                                "logs:PutLogEvents",
                                "ecr:BatchCheckLayerAvailability",
                                "ecr:BatchGetImage",
                                "ecr:GetDownloadUrlForLayer",
                                "ecr:GetAuthorizationToken"
                            ],
                            "Resource": "*"
                        }]
                    }

    ECSInstanceProfile: 
        Type: AWS::IAM::InstanceProfile
        Properties:
            Path: /
            Roles: 
                - !Ref ECSRole

Outputs:

    Cluster:
        Description: A reference to the ECS cluster
        Value: !Ref ECSCluster

